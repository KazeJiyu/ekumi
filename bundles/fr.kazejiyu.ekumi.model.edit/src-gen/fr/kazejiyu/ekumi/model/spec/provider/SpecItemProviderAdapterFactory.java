/**
 */
package fr.kazejiyu.ekumi.model.spec.provider;

import fr.kazejiyu.ekumi.model.spec.util.SpecAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SpecItemProviderAdapterFactory extends SpecAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpecItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.Start} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartItemProvider startItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.Start}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartAdapter() {
		if (startItemProvider == null) {
			startItemProvider = new StartItemProvider(this);
		}

		return startItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.ParallelSplit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelSplitItemProvider parallelSplitItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.ParallelSplit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelSplitAdapter() {
		if (parallelSplitItemProvider == null) {
			parallelSplitItemProvider = new ParallelSplitItemProvider(this);
		}

		return parallelSplitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.ExternalTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalTaskItemProvider externalTaskItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.ExternalTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalTaskAdapter() {
		if (externalTaskItemProvider == null) {
			externalTaskItemProvider = new ExternalTaskItemProvider(this);
		}

		return externalTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.LibraryTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibraryTaskItemProvider libraryTaskItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.LibraryTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibraryTaskAdapter() {
		if (libraryTaskItemProvider == null) {
			libraryTaskItemProvider = new LibraryTaskItemProvider(this);
		}

		return libraryTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.Synchronization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronizationItemProvider synchronizationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.Synchronization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchronizationAdapter() {
		if (synchronizationItemProvider == null) {
			synchronizationItemProvider = new SynchronizationItemProvider(this);
		}

		return synchronizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.MultiChoice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiChoiceItemProvider multiChoiceItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.MultiChoice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiChoiceAdapter() {
		if (multiChoiceItemProvider == null) {
			multiChoiceItemProvider = new MultiChoiceItemProvider(this);
		}

		return multiChoiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.SimpleMerge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleMergeItemProvider simpleMergeItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.SimpleMerge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleMergeAdapter() {
		if (simpleMergeItemProvider == null) {
			simpleMergeItemProvider = new SimpleMergeItemProvider(this);
		}

		return simpleMergeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.DataFlows} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowsItemProvider dataFlowsItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.DataFlows}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowsAdapter() {
		if (dataFlowsItemProvider == null) {
			dataFlowsItemProvider = new DataFlowsItemProvider(this);
		}

		return dataFlowsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.DataFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFlowItemProvider dataFlowItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.DataFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFlowAdapter() {
		if (dataFlowItemProvider == null) {
			dataFlowItemProvider = new DataFlowItemProvider(this);
		}

		return dataFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.ConditionalRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalRootItemProvider conditionalRootItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.ConditionalRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalRootAdapter() {
		if (conditionalRootItemProvider == null) {
			conditionalRootItemProvider = new ConditionalRootItemProvider(this);
		}

		return conditionalRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.kazejiyu.ekumi.model.spec.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.kazejiyu.ekumi.model.spec.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (activityItemProvider != null)
			activityItemProvider.dispose();
		if (startItemProvider != null)
			startItemProvider.dispose();
		if (parallelSplitItemProvider != null)
			parallelSplitItemProvider.dispose();
		if (externalTaskItemProvider != null)
			externalTaskItemProvider.dispose();
		if (libraryTaskItemProvider != null)
			libraryTaskItemProvider.dispose();
		if (synchronizationItemProvider != null)
			synchronizationItemProvider.dispose();
		if (multiChoiceItemProvider != null)
			multiChoiceItemProvider.dispose();
		if (simpleMergeItemProvider != null)
			simpleMergeItemProvider.dispose();
		if (variableItemProvider != null)
			variableItemProvider.dispose();
		if (dataFlowsItemProvider != null)
			dataFlowsItemProvider.dispose();
		if (dataFlowItemProvider != null)
			dataFlowItemProvider.dispose();
		if (conditionalRootItemProvider != null)
			conditionalRootItemProvider.dispose();
		if (conditionItemProvider != null)
			conditionItemProvider.dispose();
	}

}
